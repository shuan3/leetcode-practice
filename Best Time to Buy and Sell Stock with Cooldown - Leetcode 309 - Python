from typing import List
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        n = len(prices)
        dp = [[0] * 2 for _ in range(n)]
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        dp[1][0] = max(dp[0][0], dp[0][1] + prices[1])
        dp[1][1] = max(dp[0][1], dp[0][0] - prices[1])
        for i in range(2, n):
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])
            dp[i][1] = max(dp[i - 1][1], dp[i - 2][0] - prices[i])
        return dp[-1][0]
    

class Solution:
    def maxProfit(self,prices: List[int])-> int:
        dp={}
        def dfs(i,buying):
            if i>=len(prices):
                return 0
            if (i,buying) in dp:
                return dp[(i,buying)]
            if buying:
                dp[(i,buying)]=max(dfs(i+1,False)+prices[i],dfs(i+1,True))
            else:
                dp[(i,buying)]=max(dfs(i+1,True)-prices[i],dfs(i+1,False))
            return dp[(i,buying)]
        return dfs(0,True)